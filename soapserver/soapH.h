/* soapH.h
   Generated by gSOAP 2.8.17r from beopfunctions.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_beop__string
#define SOAP_TYPE_beop__string (8)
#endif

#define soap_default_beop__string(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_beop__string(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_beop__string(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_beop__string(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_beop__string(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_beop__string
#define soap_write_beop__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_beop__string(soap, data),0) || soap_put_beop__string(soap, data, "beop:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_beop__string(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_beop__string
#define soap_read_beop__string(soap, data) ( soap_begin_recv(soap) || !soap_get_beop__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_beop__string soap_instantiate_std__wstring


#define soap_copy_beop__string soap_copy_std__wstring

#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (7)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_std__wstring
#define soap_write_std__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__wstring(soap, data),0) || soap_put_std__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_std__wstring
#define soap_read_std__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_std__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL); }

inline std::wstring * soap_new_req_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline std::wstring * soap_new_set_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline void soap_delete_std__wstring(struct soap *soap, std::wstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_beop_userlogin
#define SOAP_TYPE_beop_userlogin (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_beop_userlogin(struct soap*, struct beop_userlogin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_beop_userlogin(struct soap*, const struct beop_userlogin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_beop_userlogin(struct soap*, const char*, int, const struct beop_userlogin *, const char*);
SOAP_FMAC3 struct beop_userlogin * SOAP_FMAC4 soap_in_beop_userlogin(struct soap*, const char*, struct beop_userlogin *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_beop_userlogin(struct soap*, const struct beop_userlogin *, const char*, const char*);

#ifndef soap_write_beop_userlogin
#define soap_write_beop_userlogin(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_beop_userlogin(soap, data),0) || soap_put_beop_userlogin(soap, data, "beop-userlogin", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct beop_userlogin * SOAP_FMAC4 soap_get_beop_userlogin(struct soap*, struct beop_userlogin *, const char*, const char*);

#ifndef soap_read_beop_userlogin
#define soap_read_beop_userlogin(soap, data) ( soap_begin_recv(soap) || !soap_get_beop_userlogin(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct beop_userlogin * SOAP_FMAC2 soap_instantiate_beop_userlogin(struct soap*, int, const char*, const char*, size_t*);

inline struct beop_userlogin * soap_new_beop_userlogin(struct soap *soap, int n = -1) { return soap_instantiate_beop_userlogin(soap, n, NULL, NULL, NULL); }

inline struct beop_userlogin * soap_new_req_beop_userlogin(struct soap *soap, std::wstring& userName, std::wstring& userPwd) { struct beop_userlogin *_p = soap_instantiate_beop_userlogin(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_userlogin(soap, _p); _p->userName = userName; _p->userPwd = userPwd; } return _p; }

inline struct beop_userlogin * soap_new_set_beop_userlogin(struct soap *soap, std::wstring& userName, std::wstring& userPwd) { struct beop_userlogin *_p = soap_instantiate_beop_userlogin(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_userlogin(soap, _p); _p->userName = userName; _p->userPwd = userPwd; } return _p; }

inline void soap_delete_beop_userlogin(struct soap *soap, struct beop_userlogin *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_beop_userlogin(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_beop_userloginResponse
#define SOAP_TYPE_beop_userloginResponse (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_beop_userloginResponse(struct soap*, struct beop_userloginResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_beop_userloginResponse(struct soap*, const struct beop_userloginResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_beop_userloginResponse(struct soap*, const char*, int, const struct beop_userloginResponse *, const char*);
SOAP_FMAC3 struct beop_userloginResponse * SOAP_FMAC4 soap_in_beop_userloginResponse(struct soap*, const char*, struct beop_userloginResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_beop_userloginResponse(struct soap*, const struct beop_userloginResponse *, const char*, const char*);

#ifndef soap_write_beop_userloginResponse
#define soap_write_beop_userloginResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_beop_userloginResponse(soap, data),0) || soap_put_beop_userloginResponse(soap, data, "beop-userloginResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct beop_userloginResponse * SOAP_FMAC4 soap_get_beop_userloginResponse(struct soap*, struct beop_userloginResponse *, const char*, const char*);

#ifndef soap_read_beop_userloginResponse
#define soap_read_beop_userloginResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_beop_userloginResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct beop_userloginResponse * SOAP_FMAC2 soap_instantiate_beop_userloginResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct beop_userloginResponse * soap_new_beop_userloginResponse(struct soap *soap, int n = -1) { return soap_instantiate_beop_userloginResponse(soap, n, NULL, NULL, NULL); }

inline struct beop_userloginResponse * soap_new_req_beop_userloginResponse(struct soap *soap) { struct beop_userloginResponse *_p = soap_instantiate_beop_userloginResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_userloginResponse(soap, _p); } return _p; }

inline struct beop_userloginResponse * soap_new_set_beop_userloginResponse(struct soap *soap, std::wstring *userInfo) { struct beop_userloginResponse *_p = soap_instantiate_beop_userloginResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_userloginResponse(soap, _p); _p->userInfo = userInfo; } return _p; }

inline void soap_delete_beop_userloginResponse(struct soap *soap, struct beop_userloginResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_beop_userloginResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_beop_getvalue_multiple
#define SOAP_TYPE_beop_getvalue_multiple (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_beop_getvalue_multiple(struct soap*, struct beop_getvalue_multiple *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_beop_getvalue_multiple(struct soap*, const struct beop_getvalue_multiple *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_beop_getvalue_multiple(struct soap*, const char*, int, const struct beop_getvalue_multiple *, const char*);
SOAP_FMAC3 struct beop_getvalue_multiple * SOAP_FMAC4 soap_in_beop_getvalue_multiple(struct soap*, const char*, struct beop_getvalue_multiple *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_beop_getvalue_multiple(struct soap*, const struct beop_getvalue_multiple *, const char*, const char*);

#ifndef soap_write_beop_getvalue_multiple
#define soap_write_beop_getvalue_multiple(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_beop_getvalue_multiple(soap, data),0) || soap_put_beop_getvalue_multiple(soap, data, "beop-getvalue-multiple", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct beop_getvalue_multiple * SOAP_FMAC4 soap_get_beop_getvalue_multiple(struct soap*, struct beop_getvalue_multiple *, const char*, const char*);

#ifndef soap_read_beop_getvalue_multiple
#define soap_read_beop_getvalue_multiple(soap, data) ( soap_begin_recv(soap) || !soap_get_beop_getvalue_multiple(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct beop_getvalue_multiple * SOAP_FMAC2 soap_instantiate_beop_getvalue_multiple(struct soap*, int, const char*, const char*, size_t*);

inline struct beop_getvalue_multiple * soap_new_beop_getvalue_multiple(struct soap *soap, int n = -1) { return soap_instantiate_beop_getvalue_multiple(soap, n, NULL, NULL, NULL); }

inline struct beop_getvalue_multiple * soap_new_req_beop_getvalue_multiple(struct soap *soap, std::wstring& strPointNameList) { struct beop_getvalue_multiple *_p = soap_instantiate_beop_getvalue_multiple(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_getvalue_multiple(soap, _p); _p->strPointNameList = strPointNameList; } return _p; }

inline struct beop_getvalue_multiple * soap_new_set_beop_getvalue_multiple(struct soap *soap, std::wstring& strPointNameList) { struct beop_getvalue_multiple *_p = soap_instantiate_beop_getvalue_multiple(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_getvalue_multiple(soap, _p); _p->strPointNameList = strPointNameList; } return _p; }

inline void soap_delete_beop_getvalue_multiple(struct soap *soap, struct beop_getvalue_multiple *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_beop_getvalue_multiple(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_beop_getvalue_multipleResponse
#define SOAP_TYPE_beop_getvalue_multipleResponse (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_beop_getvalue_multipleResponse(struct soap*, struct beop_getvalue_multipleResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_beop_getvalue_multipleResponse(struct soap*, const struct beop_getvalue_multipleResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_beop_getvalue_multipleResponse(struct soap*, const char*, int, const struct beop_getvalue_multipleResponse *, const char*);
SOAP_FMAC3 struct beop_getvalue_multipleResponse * SOAP_FMAC4 soap_in_beop_getvalue_multipleResponse(struct soap*, const char*, struct beop_getvalue_multipleResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_beop_getvalue_multipleResponse(struct soap*, const struct beop_getvalue_multipleResponse *, const char*, const char*);

#ifndef soap_write_beop_getvalue_multipleResponse
#define soap_write_beop_getvalue_multipleResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_beop_getvalue_multipleResponse(soap, data),0) || soap_put_beop_getvalue_multipleResponse(soap, data, "beop-getvalue-multipleResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct beop_getvalue_multipleResponse * SOAP_FMAC4 soap_get_beop_getvalue_multipleResponse(struct soap*, struct beop_getvalue_multipleResponse *, const char*, const char*);

#ifndef soap_read_beop_getvalue_multipleResponse
#define soap_read_beop_getvalue_multipleResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_beop_getvalue_multipleResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct beop_getvalue_multipleResponse * SOAP_FMAC2 soap_instantiate_beop_getvalue_multipleResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct beop_getvalue_multipleResponse * soap_new_beop_getvalue_multipleResponse(struct soap *soap, int n = -1) { return soap_instantiate_beop_getvalue_multipleResponse(soap, n, NULL, NULL, NULL); }

inline struct beop_getvalue_multipleResponse * soap_new_req_beop_getvalue_multipleResponse(struct soap *soap) { struct beop_getvalue_multipleResponse *_p = soap_instantiate_beop_getvalue_multipleResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_getvalue_multipleResponse(soap, _p); } return _p; }

inline struct beop_getvalue_multipleResponse * soap_new_set_beop_getvalue_multipleResponse(struct soap *soap, std::wstring *strPointValueList) { struct beop_getvalue_multipleResponse *_p = soap_instantiate_beop_getvalue_multipleResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_getvalue_multipleResponse(soap, _p); _p->strPointValueList = strPointValueList; } return _p; }

inline void soap_delete_beop_getvalue_multipleResponse(struct soap *soap, struct beop_getvalue_multipleResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_beop_getvalue_multipleResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_beop_getvalue
#define SOAP_TYPE_beop_getvalue (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_beop_getvalue(struct soap*, struct beop_getvalue *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_beop_getvalue(struct soap*, const struct beop_getvalue *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_beop_getvalue(struct soap*, const char*, int, const struct beop_getvalue *, const char*);
SOAP_FMAC3 struct beop_getvalue * SOAP_FMAC4 soap_in_beop_getvalue(struct soap*, const char*, struct beop_getvalue *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_beop_getvalue(struct soap*, const struct beop_getvalue *, const char*, const char*);

#ifndef soap_write_beop_getvalue
#define soap_write_beop_getvalue(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_beop_getvalue(soap, data),0) || soap_put_beop_getvalue(soap, data, "beop-getvalue", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct beop_getvalue * SOAP_FMAC4 soap_get_beop_getvalue(struct soap*, struct beop_getvalue *, const char*, const char*);

#ifndef soap_read_beop_getvalue
#define soap_read_beop_getvalue(soap, data) ( soap_begin_recv(soap) || !soap_get_beop_getvalue(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct beop_getvalue * SOAP_FMAC2 soap_instantiate_beop_getvalue(struct soap*, int, const char*, const char*, size_t*);

inline struct beop_getvalue * soap_new_beop_getvalue(struct soap *soap, int n = -1) { return soap_instantiate_beop_getvalue(soap, n, NULL, NULL, NULL); }

inline struct beop_getvalue * soap_new_req_beop_getvalue(struct soap *soap, std::wstring& strPointName) { struct beop_getvalue *_p = soap_instantiate_beop_getvalue(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_getvalue(soap, _p); _p->strPointName = strPointName; } return _p; }

inline struct beop_getvalue * soap_new_set_beop_getvalue(struct soap *soap, std::wstring& strPointName) { struct beop_getvalue *_p = soap_instantiate_beop_getvalue(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_getvalue(soap, _p); _p->strPointName = strPointName; } return _p; }

inline void soap_delete_beop_getvalue(struct soap *soap, struct beop_getvalue *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_beop_getvalue(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_beop_getvalueResponse
#define SOAP_TYPE_beop_getvalueResponse (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_beop_getvalueResponse(struct soap*, struct beop_getvalueResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_beop_getvalueResponse(struct soap*, const struct beop_getvalueResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_beop_getvalueResponse(struct soap*, const char*, int, const struct beop_getvalueResponse *, const char*);
SOAP_FMAC3 struct beop_getvalueResponse * SOAP_FMAC4 soap_in_beop_getvalueResponse(struct soap*, const char*, struct beop_getvalueResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_beop_getvalueResponse(struct soap*, const struct beop_getvalueResponse *, const char*, const char*);

#ifndef soap_write_beop_getvalueResponse
#define soap_write_beop_getvalueResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_beop_getvalueResponse(soap, data),0) || soap_put_beop_getvalueResponse(soap, data, "beop-getvalueResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct beop_getvalueResponse * SOAP_FMAC4 soap_get_beop_getvalueResponse(struct soap*, struct beop_getvalueResponse *, const char*, const char*);

#ifndef soap_read_beop_getvalueResponse
#define soap_read_beop_getvalueResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_beop_getvalueResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct beop_getvalueResponse * SOAP_FMAC2 soap_instantiate_beop_getvalueResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct beop_getvalueResponse * soap_new_beop_getvalueResponse(struct soap *soap, int n = -1) { return soap_instantiate_beop_getvalueResponse(soap, n, NULL, NULL, NULL); }

inline struct beop_getvalueResponse * soap_new_req_beop_getvalueResponse(struct soap *soap) { struct beop_getvalueResponse *_p = soap_instantiate_beop_getvalueResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_getvalueResponse(soap, _p); } return _p; }

inline struct beop_getvalueResponse * soap_new_set_beop_getvalueResponse(struct soap *soap, std::wstring *strPointValue) { struct beop_getvalueResponse *_p = soap_instantiate_beop_getvalueResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_beop_getvalueResponse(soap, _p); _p->strPointValue = strPointValue; } return _p; }

inline void soap_delete_beop_getvalueResponse(struct soap *soap, struct beop_getvalueResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_beop_getvalueResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTobeop__string
#define SOAP_TYPE_PointerTobeop__string (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobeop__string(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobeop__string(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTobeop__string(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobeop__string(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTobeop__string
#define soap_write_PointerTobeop__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTobeop__string(soap, data),0) || soap_put_PointerTobeop__string(soap, data, "beop:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTobeop__string(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTobeop__string
#define soap_read_PointerTobeop__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobeop__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
